const path = require('path');
const Asset = require('./Asset');
const AssetInline = require('./AssetInline');
const AssetScript = require('./AssetScript');
const AssetSource = require('./AssetSource');
const { duplicateScriptWarning, duplicateStyleWarning } = require('./Messages/Warning');
const { resolveException } = require('./Messages/Exception');
const Options = require('./Options');

class Resolver {
  static fs = null;

  /**
   * @type {string} The issuer filename of required the file.
   */
  static issuerFile = '';

  /**
   * @type {string} The issuer request of required the file.
   */
  static issuerRequest = '';

  /**
   * @type {AssetEntryOptions} The current entry point where are resolved all dependencies.
   */
  static entryPoint = {};

  /**
   * @type {string} The context directory of required the file.
   */
  static context = '';

  /**
   * The cache of resolved source files. Defined at one time.
   *
   * @type {Map<string, Map<string, string>>}
   */
  static sourceFiles = new Map();

  /**
   * The data of assets sources and issuers. Used for resolving output assets.
   * For each new chunk must be cleaned.
   * Note: same module can have many issuers and can be saved under different asset filenames.
   *
   * @type {Map<string, {issuers:Map, originalAssetFile:string, moduleHandler?:(originalAssetFile:string, issuer:string) => string}>}
   */
  static data = new Map();

  /**
   * The cache of duplicate scripts and styles.
   */
  static duplicates = new Map();

  /**
   * @param {FileSystem} fs
   * @param {string} rootContext The Webpack root context path.
   */
  static init({ fs, rootContext }) {
    this.fs = fs;
    this.rootContext = rootContext;

    // bind this context to the method for using in VM context
    this.require = this.require.bind(this);
  }

  /**
   * Clear caches.
   * Called only once, when the plugin is applied.
   */
  static clear() {
    this.data.clear();
    this.sourceFiles.clear();
  }

  /**
   * Reset settings.
   * Called before each compilation after changes by `webpack serv/watch`.
   */
  static reset() {
    // reset outdated assets after rebuild via webpack dev server
    // note: new filenames are generated on the fly in the this.resolveAsset() method
    this.data.forEach((item) => item.issuers.clear());
    this.duplicates.clear();
  }

  /**
   * Set the current issuer and the entry point.
   *
   * @param {string} issuer The issuer request.
   * @param {Object} entryPoint The current entry point.
   */
  static setContext(issuer, entryPoint) {
    const [file] = issuer.split('?', 1);
    this.issuerFile = file;
    this.issuerRequest = issuer;
    this.context = path.dirname(file);
    this.entryPoint = entryPoint;
  }

  /**
   * Add the context and resolved path of the resource to resolve it in require() at render time.
   *
   * @param {string} sourceFile The full path of source asset file.
   * @param {string} assetFile The original asset filename generated by Webpack, relative by output path.
   */
  static addAsset(sourceFile, assetFile) {
    sourceFile = path.resolve(sourceFile);

    let item = this.data.get(sourceFile);
    if (!item) {
      this.data.set(sourceFile, {
        issuers: new Map(),
        originalAssetFile: assetFile,
      });
      return;
    }

    if (assetFile != null) item.originalAssetFile = assetFile;
  }

  /**
   * Add the resolved output asset file.
   *
   * @param {string} sourceFile The full path of source asset file.
   * @param {string} assetFile The resolved output asset filename, given the auto public path.
   * @param {string} issuer The issuer of asset file.
   */
  static addResolvedAsset(sourceFile, assetFile, issuer) {
    sourceFile = path.resolve(sourceFile);

    let item = this.data.get(sourceFile);
    if (!item) {
      this.data.set(sourceFile, {
        issuers: new Map([[issuer, assetFile]]),
      });
      return;
    }
    item.issuers.set(issuer, assetFile);
  }

  /**
   * @param {string} sourceFile The full path of source asset file.
   * @param {Object} moduleHandler External handler for processing of the asset module.
   */
  static setModuleHandler(sourceFile, moduleHandler = null) {
    let item = this.data.get(sourceFile);
    if (item) {
      item.moduleHandler = moduleHandler;
    }
  }

  /**
   * Resolve full path of asset source file by raw request and issuer.
   *
   * @param {string} rawRequest The raw request of resource.
   * @param {string} issuer The issuer of resource.
   * @return {string|null} The resolved full path of resource.
   */
  static getSourceFile(rawRequest, issuer) {
    let sourceFile = this.sourceFiles.get(issuer)?.get(rawRequest);
    if (sourceFile) return sourceFile;

    // normalize request, e.g. the relative `path/to/../to/file` path to absolute `path/to/file`
    sourceFile = path.resolve(this.context, rawRequest);
    const [file] = sourceFile.split('?', 1);

    if (rawRequest.startsWith(this.context) || this.fs.existsSync(file)) {
      this.addSourceFile(sourceFile, rawRequest, issuer);
      return sourceFile;
    }

    return null;
  }

  /**
   * Add resolved source file to data.
   *
   * @param {string} sourceFile The resolved full path of resource.
   * @param {string} rawRequest The rawRequest of resource.
   * @param {string} issuer The issuer of resource.
   */
  static addSourceFile(sourceFile, rawRequest, issuer) {
    let item = this.sourceFiles.get(issuer);
    if (item == null) {
      this.sourceFiles.set(issuer, new Map([[rawRequest, sourceFile]]));
    } else {
      item.set(rawRequest, sourceFile);
    }
  }

  /**
   * Whether output file is the CSS file.
   *
   * @param {string} filename The output filename.
   * @return {boolean}
   */
  static isStyle(filename) {
    return filename.endsWith('.css');
  }

  /**
   * Whether in output html file is used duplicate script or style.
   *
   * Note: using duplicate scripts or styles in the same html file doesn't make sense, only unique files should be used.
   *
   * @param {string} file
   * @return {boolean}
   */
  static isDuplicate(file) {
    const issuerAsset = this.entryPoint?.filename;

    if (!issuerAsset) {
      return false;
    }

    if (!this.duplicates.has(issuerAsset)) {
      this.duplicates.set(issuerAsset, new Set([file]));
      return false;
    }

    const duplicate = this.duplicates.get(issuerAsset);
    if (duplicate.has(file)) return true;

    duplicate.add(file);

    return false;
  }

  /**
   * Get key of asset file to save it as resolved under its issuer.
   *
   * Note: the key can be an output file when the issuer is a current entry point
   *  otherwise is a source file of an issuer, e.g. a style.
   *
   * @param {string} issuer
   * @param {AssetEntryOptions} entryPoint
   */
  static getAssetKey(issuer, entryPoint) {
    return entryPoint.request === issuer ? entryPoint.filename : issuer;
  }

  /**
   * Resolve output asset filename, given the auto public path.
   *
   * @param {string} sourceFile The resolved full path of resource.
   * @return {string|null}
   */
  static resolveAsset(sourceFile) {
    const item = this.data.get(sourceFile);

    if (!item) return null;

    const { entryPoint, issuerRequest: issuer } = this;
    const key = this.getAssetKey(issuer, entryPoint);
    const assetFile = item.issuers.get(key);
    const isInlinedIssuer = AssetSource.isInline(issuer);

    if (assetFile && !isInlinedIssuer) return assetFile;

    const { originalAssetFile, moduleHandler } = item;
    let assetOutputFile;

    if (originalAssetFile != null) {
      // normalize output asset files
      if (AssetInline.isDataUrl(originalAssetFile)) {
        assetOutputFile = originalAssetFile;
      } else {
        const issuerAssetFile = isInlinedIssuer ? entryPoint.filename : Asset.findAssetFile(issuer);

        if (issuerAssetFile) {
          assetOutputFile = Options.getAssetOutputFile(originalAssetFile, issuerAssetFile);
        }
      }
    } else if (moduleHandler != null) {
      // normalize output asset files processed via external loader, e.g. `responsive-loader`
      assetOutputFile = moduleHandler(originalAssetFile, issuer);
    }

    if (assetOutputFile != null) {
      item.issuers.set(key, assetOutputFile);
    }

    return assetOutputFile;
  }

  /**
   * Require the resource request in the compiled template or CSS.
   *
   * @param {string} rawRequest The raw request of source resource.
   * @returns {string} The output asset filename generated by filename template.
   * @throws {Error}
   */
  static require(rawRequest) {
    const { issuerFile, issuerRequest, context } = this;
    const request = path.resolve(context, rawRequest);

    // @import CSS rule is not supported
    if (rawRequest.indexOf('??ruleSet') > 0) {
      resolveException(rawRequest, issuerRequest);
    }

    // bypass the asset contained data-URL
    if (AssetInline.isDataUrl(rawRequest)) return rawRequest;

    // bypass the inline CSS
    if (AssetSource.isInline(rawRequest)) return rawRequest;

    // bypass the asset/inline as inline SVG
    if (AssetInline.isInlineSvg(request, issuerFile)) return request;

    // require script in tag <script src=require('./main.js')>
    const scriptFile = AssetScript.resolveFile(rawRequest);

    if (scriptFile != null) {
      if (this.isDuplicate(scriptFile)) {
        const filePath = path.relative(this.rootContext, scriptFile);
        const issuerPath = path.relative(this.rootContext, issuerRequest);
        duplicateScriptWarning(filePath, issuerPath);
      }

      return scriptFile;
    }

    // resolve resources
    const sourceFile = this.getSourceFile(rawRequest, issuerFile);

    if (sourceFile != null) {
      let assetFile = this.resolveAsset(sourceFile);

      if (assetFile != null) {
        if (this.isStyle(assetFile) && this.isDuplicate(assetFile)) {
          const filePath = path.relative(this.rootContext, sourceFile);
          const issuerPath = path.relative(this.rootContext, issuerRequest);
          duplicateStyleWarning(filePath, issuerPath);
        }

        return assetFile;
      }

      // try to resolve inline data url
      const dataUrl = AssetInline.getDataUrl(sourceFile, issuerFile);
      if (dataUrl != null) return dataUrl;
    }

    // require only js code or json data
    if (/\.js[a-z0-9]*$/i.test(rawRequest)) return require(request);

    resolveException(rawRequest, issuerRequest);
  }
}

module.exports = Resolver;
